---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
---

<Layout title="Join Captain Said - Sign Up">
  <Header />
  
  <section class="signup-hero">
    <div class="container">
      <div class="signup-content">
        <div class="signup-header">
          <h1>Ready to Join the Crew?</h1>
          <p>Answer a few fun questions to get started with Captain Said</p>
        </div>
        
        <form class="signup-form" id="signupForm">
          <div class="form-group">
            <label for="name">What's your captain name?</label>
            <input type="text" id="name" name="name" required placeholder="Captain..." />
          </div>
          
          <div class="form-group">
            <label for="email">Where should we send your sailing updates?</label>
            <input type="email" id="email" name="email" required placeholder="your@email.com" />
          </div>
          
          <div class="form-group">
            <label for="phone">What's your ship-to-shore number?</label>
            <input type="tel" id="phone" name="phone" required placeholder="+1 (555) 123-4567" />
          </div>
          
          <div class="form-group">
            <label for="location">What port are you calling home?</label>
            <input type="text" id="location" name="location" required placeholder="City, Country" />
          </div>
          
          <button type="submit" class="btn btn-large signup-btn">
            Submit to Join Chat
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="5" r="3"/>
              <path d="M12 22V8"/>
              <path d="M5 12H2a10 10 0 0 0 20 0h-3"/>
            </svg>
          </button>
          
          <p class="signup-note">
            After submitting, you'll chart your course to secure your spot aboard the Captain Said crew.
            <br><br>
            Need help with Telegram? Contact us at <a href="mailto:CaptainSaidClub@Gmail.com" style="color: #000000; text-decoration: underline;">CaptainSaidClub@Gmail.com</a>
          </p>
        </form>
      </div>
    </div>
  </section>
</Layout>

<style>
  .signup-hero {
    padding: 120px 0 80px;
    background: 
      radial-gradient(ellipse at top left, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
      radial-gradient(ellipse at bottom right, rgba(14, 165, 233, 0.08) 0%, transparent 50%),
      linear-gradient(135deg, #f8fafc 0%, #e1f5fe 50%, #ffffff 100%);
    min-height: 100vh;
    position: relative;
    overflow: hidden;
  }

  .signup-hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
      repeating-linear-gradient(
        135deg,
        transparent,
        transparent 60px,
        rgba(59, 130, 246, 0.02) 60px,
        rgba(59, 130, 246, 0.02) 120px
      );
    pointer-events: none;
    animation: signup-wave 30s linear infinite;
  }

  @keyframes signup-wave {
    0% { transform: translateX(0) translateY(0); }
    100% { transform: translateX(-120px) translateY(-120px); }
  }

  .signup-content {
    max-width: 600px;
    margin: 0 auto;
    text-align: center;
    position: relative;
    z-index: 1;
  }

  .signup-header {
    margin-bottom: 3rem;
  }

  .signup-header h1 {
    font-size: clamp(2rem, 4vw, 2.5rem);
    font-weight: 800;
    line-height: 1.1;
    margin-bottom: 1rem;
    color: #000000;
  }

  .signup-header p {
    font-size: 1.125rem;
    color: #666666;
    margin: 0;
  }

  .signup-form {
    background: 
      linear-gradient(135deg, #ffffff 0%, #f8fafc 100%),
      radial-gradient(circle at 50% 50%, rgba(59, 130, 246, 0.02) 0%, transparent 70%);
    border: 1px solid #f0f0f0;
    border-radius: 16px;
    padding: 2.5rem;
    box-shadow: 
      0 4px 20px rgba(0, 0, 0, 0.08),
      0 8px 40px rgba(59, 130, 246, 0.05);
    text-align: left;
    position: relative;
    overflow: hidden;
  }

  .signup-form::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
      repeating-linear-gradient(
        45deg,
        transparent,
        transparent 100px,
        rgba(14, 165, 233, 0.01) 100px,
        rgba(14, 165, 233, 0.01) 200px
      );
    pointer-events: none;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    font-size: 1rem;
    font-weight: 600;
    color: #000000;
    margin-bottom: 0.5rem;
    line-height: 1.4;
  }

  .form-group input {
    width: 100%;
    padding: 12px 16px;
    font-size: 1rem;
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    background: #ffffff;
    color: #000000;
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .form-group input:focus {
    outline: none;
    border-color: #000000;
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  }

  .form-group input::placeholder {
    color: #999999;
  }

  .signup-btn {
    width: 100%;
    justify-content: center;
    margin-bottom: 1rem;
    background: #000000;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .step-btn:hover {
    background: #333333;
    transform: translateY(-1px);
  }

  .join-btn {
    background: #22c55e;
  }

  .join-btn:hover {
    background: #16a34a;
  }

  .progress-bar {
    height: 4px;
    background: #f0f0f0;
    border-radius: 0 0 16px 16px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: #000000;
    width: 25%;
    transition: width 0.3s ease;
  }

  @media (max-width: 768px) {
    .modal-content {
      margin: 10% auto;
      width: 95%;
    }

    .modal-header {
      padding: 1.5rem 1.5rem 1rem;
    }

    .modal-header h2 {
      font-size: 1.5rem;
    }

    .steps-container {
      padding: 1.5rem;
    }

    .step {
      gap: 1rem;
    }

    .step-number {
      width: 32px;
      height: 32px;
      font-size: 1rem;
    }

    .step-content h3 {
      font-size: 1.125rem;
    }

    .gif-placeholder {
      padding: 1.5rem;
    }

    .gif-placeholder p {
      font-size: 0.85rem;
    }
  }
</style>

<script is:inline>
  // We'll initialize Supabase using a CDN import
  async function initializeSupabase() {
    try {
      // Import Supabase from CDN
      const { createClient } = await import('https://cdn.skypack.dev/@supabase/supabase-js');
      
      // These should be replaced with your actual Supabase credentials
      const SUPABASE_URL = 'https://pfldcwwsidyuxavxgeip.supabase.co';
      const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBmbGRjd3dzaWR5dXhhdnhnZWlwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI2MTA0NzgsImV4cCI6MjA2ODE4NjQ3OH0.X3ELDbN8Db1fxSEWxRVHFBZVV8uFcM8qc9ikP0d3I2A';
      
      if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
        console.error('❌ Supabase credentials not configured properly');
        alert('Supabase is not configured. Please set up your Supabase credentials.');
        return null;
      }
      
      const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
      console.log('✅ Supabase client initialized');
      return supabase;
    } catch (error) {
      console.error('❌ Failed to initialize Supabase:', error);
      return null;
    }
  }

  // Handle form submission and save to Supabase
  document.addEventListener('DOMContentLoaded', async function() {
    const supabase = await initializeSupabase();
    
    if (!supabase) {
      console.error('❌ Supabase client not initialized');
      // Show user-friendly error
      const form = document.getElementById('signupForm');
      if (form) {
        form.innerHTML = '<div style="text-align: center; padding: 2rem; color: #dc2626;"><h3>Configuration Error</h3><p>Unable to connect to database. Please try again later.</p></div>';
      }
      return;
    }
    
    console.log('=== SUPABASE DEBUG INFO ===');
    console.log('✅ Supabase client ready');
    
    // Test Supabase connection on page load
    async function testConnection() {
      try {
        console.log('Testing Supabase connection...');
        
        // Test basic connection
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('❌ Supabase auth test failed:', error);
        } else {
          console.log('✅ Supabase connection successful');
        }
        
        // Test table access
        const { data: tableTest, error: tableError } = await supabase
          .from('signups')
          .select('count', { count: 'exact', head: true });
          
        if (tableError) {
          console.error('❌ Table access failed:', tableError);
          console.error('This might mean the table doesn\'t exist or RLS is blocking access');
        } else {
          console.log('✅ Table access successful');
        }
      } catch (err) {
        console.error('❌ Supabase connection error (catch):', err);
      }
    }
    
    testConnection();
    
    const form = document.getElementById('signupForm');
    if (!form) {
      console.error('Form not found');
      return;
    }
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      console.log('Form submitted'); // Debug log
      
      // Get form data
      const formData = new FormData(e.target);
      const signupData = {
        name: formData.get('name'),
        email: formData.get('email'),
        phone: formData.get('phone'),
        location: formData.get('location')
      };
      
      console.log('=== FORM SUBMISSION ===');
      console.log('Signup data:', signupData);
      
      try {
        // Disable submit button to prevent double submission
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Submitting...';
        }
        
        console.log('Attempting to insert into Supabase...');
        
        // Save to Supabase
        const { data: insertData, error: insertError } = await supabase
          .from('signups')
          .insert([signupData])
          .select();
        
        if (insertError) {
          console.error('❌ Supabase insert error:', insertError);
          console.error('Error details:', {
            message: insertError.message,
            details: insertError.details,
            hint: insertError.hint,
            code: insertError.code
          });
          
          // Show user-friendly error message
          let errorMessage = 'There was an error submitting your information. ';
          if (insertError.code === 'PGRST116') {
            errorMessage += 'The database table may not exist.';
          } else if (insertError.code === '42501') {
            errorMessage += 'Permission denied - please contact support.';
          } else {
            errorMessage += 'Please try again or contact support if the problem persists.';
          }
          
          alert(errorMessage);
          
          // Re-enable button on error
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = 'Submit to Join Chat <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M7 17L17 7M17 7H7M17 7V17"/></svg>';
          }
          return;
        }
        
        console.log('✅ Data saved successfully:', insertData);
        
        // Show success message
        alert('Success! Welcome aboard, Captain! Redirecting you to the next step...');
        
        // Redirect to telegram walkthrough page
        console.log('Redirecting to telegram walkthrough...');
        window.location.href = '/telegram-walkthrough';
        
      } catch (error) {
        console.error('❌ Catch block error:', error);
        alert(`Unexpected error: ${error.message}\n\nCheck console for details.`);
        // Re-enable button on error
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.innerHTML = 'Submit to Join Chat <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M7 17L17 7M17 7H7M17 7V17"/></svg>';
        }
      }
    });
    
    // Add some visual feedback for form validation
    const inputs = form.querySelectorAll('input[required]');
    inputs.forEach(input => {
      input.addEventListener('blur', function() {
        if (this.value.trim() === '') {
          this.style.borderColor = '#dc2626';
        } else {
          this.style.borderColor = '#22c55e';
        }
      });
      
      input.addEventListener('input', function() {
        if (this.style.borderColor === '#dc2626' && this.value.trim() !== '') {
          this.style.borderColor = '#e5e5e5';
        }
      });
    });
  });
</script>